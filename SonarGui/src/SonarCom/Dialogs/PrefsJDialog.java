/*
 * Copyright 2016 Max Nilsson
 * Preference dialog window for SonarCom 
 */
package SonarCom.Dialogs;

import SonarCom.SonarComCli;
import SonarCom.SonarComConfig;
import SonarCom.SonarFishConfig;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author max
 */
public final class PrefsJDialog extends javax.swing.JDialog {

    private final SonarComConfig  sonarComConfig;
    private final SonarFishConfig sonarFishConfig;
    private final SonarComCli sonarComCLI;
    
    /**
     * Creates new form PreferencesJDialog
     */
    public PrefsJDialog(SonarComConfig sonarComConfig, SonarFishConfig sonarFishConfig, SonarComCli sonarComCLI) {
        super();
        this.sonarComConfig  = sonarComConfig;
        this.sonarFishConfig = sonarFishConfig;
        this.sonarComCLI = sonarComCLI;
        initComponents();
        initializeDialog();
    }


    /** Initializes all 'check boxes', 'combo boxes' etc. */
    public void initializeDialog() {
        jCheckBoxGreenLed0.setSelected(this.sonarComConfig.sonarComGreenLed0);
        jCheckBoxGreenLed1.setSelected(this.sonarComConfig.sonarComGreenLed1);
        jCheckBoxRedLed0.setSelected(this.sonarComConfig.sonarComRedLed0);
        jCheckBoxRedLed1.setSelected(this.sonarComConfig.sonarComRedLed1);
        jCheckBoxBlueLed.setSelected(this.sonarFishConfig.sonarBlueLedEn);
        jCheckBoxRedLed.setSelected(this.sonarFishConfig.sonarRedLedEn);
        jCheckBoxGreenLed.setSelected(this.sonarFishConfig.sensorGreenLedEn);
        jCheckBoxYellowLed.setSelected(this.sonarFishConfig.sensorYellowLedEn);
        jCheckBoxAccEn.setSelected(this.sonarFishConfig.sensorAccEn);
        jCheckBoxCVEn.setSelected(this.sonarFishConfig.sensorCVEn);
        jCheckBoxCompEn.setSelected(this.sonarFishConfig.sensorCompEn);
        jCheckBoxPressEn.setSelected(this.sonarFishConfig.sensorPressEn);
        jCheckBoxRxRecord.setSelected(this.sonarFishConfig.sonarRxRecEn);
        jCheckBoxSensRecordEn.setSelected(this.sonarFishConfig.sensorRecEn);
        jCheckBoxSonarComAutoConnect.setSelected(this.sonarComConfig.sonarComAutoConnect);
        jCheckBoxSonarFishPower.setSelected(this.sonarComConfig.sonarFishPwrEn);
        jCheckBoxTempEn.setSelected(this.sonarFishConfig.sensorTempEn);
        jComboBoxRxDeadZone.setSelectedIndex(this.sonarFishConfig.sonarRxDeadZone);
        jComboBoxRxEn.setSelectedIndex(this.sonarFishConfig.sonarRxOn);
        jComboBoxRxGain.setSelectedIndex(this.sonarFishConfig.sonarRxGainType);
        jComboBoxRxRange.setSelectedIndex(this.sonarFishConfig.sonarRxRange);
        jComboBoxSonarComCLIPort.removeAllItems();
        jComboBoxSonarComCLIPort.addItem(this.sonarComConfig.sonarComCLIPortName);
        jComboBoxSonarComDataPort.removeAllItems();
        jComboBoxSonarComDataPort.addItem(this.sonarComConfig.sonarComDataPortName);
        jComboBoxTxEn.setSelectedIndex(this.sonarFishConfig.sonarTxOn);
        jComboBoxTxMod.setSelectedIndex(this.sonarFishConfig.sonarTxMod);
        jComboBoxTxPwr.setSelectedIndex(this.sonarFishConfig.sonarTxPwr);
        jSliderRxGainOffset.setValue(this.sonarFishConfig.sonarRxGainOffset);
        jSliderRxGainSlope.setValue(this.sonarFishConfig.sonarRxGainSlope);
        jSliderTxPulseLen.setValue(this.sonarFishConfig.sonarTxPulseLen);
        jSliderFpgaLeds.setValue(this.sonarFishConfig.sonarFpgaLeds);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPanePref = new javax.swing.JTabbedPane();
        jPanelComSettings = new javax.swing.JPanel();
        jLabelSonarComCLIPort = new javax.swing.JLabel();
        jLabelSonarComCLIPortName = new javax.swing.JLabel();
        jLabelSonarComDataPort = new javax.swing.JLabel();
        jLabelSonarComDataPortName = new javax.swing.JLabel();
        jCheckBoxSonarComAutoConnect = new javax.swing.JCheckBox();
        jCheckBoxSonarFishPower = new javax.swing.JCheckBox();
        jComboBoxSonarComCLIPort = new javax.swing.JComboBox();
        jComboBoxSonarComDataPort = new javax.swing.JComboBox();
        jButtonRefreshPortList = new javax.swing.JButton();
        jButtonConnect = new javax.swing.JButton();
        jTabbedPaneSonarFish = new javax.swing.JTabbedPane();
        jPanelRx = new javax.swing.JPanel();
        jLabelRxEn = new javax.swing.JLabel();
        jComboBoxRxEn = new javax.swing.JComboBox();
        jLabelRxGain = new javax.swing.JLabel();
        jComboBoxRxGain = new javax.swing.JComboBox();
        jComboBoxRxRange = new javax.swing.JComboBox();
        jLabelRxRange = new javax.swing.JLabel();
        jCheckBoxRxRecord = new javax.swing.JCheckBox();
        jComboBoxRxDeadZone = new javax.swing.JComboBox();
        jLabelRxDeadZone = new javax.swing.JLabel();
        jPanelRxGainOffset = new javax.swing.JPanel();
        jSliderRxGainOffset = new javax.swing.JSlider();
        jTextFieldRxGainOffset = new javax.swing.JTextField();
        jPanelRxGainSlope = new javax.swing.JPanel();
        jTextFieldRxGainSlope = new javax.swing.JTextField();
        jSliderRxGainSlope = new javax.swing.JSlider();
        jPanelTx = new javax.swing.JPanel();
        jComboBoxTxMod = new javax.swing.JComboBox();
        jLabelTxMod = new javax.swing.JLabel();
        jLabelTxEn = new javax.swing.JLabel();
        jComboBoxTxEn = new javax.swing.JComboBox();
        jLabelTxPow = new javax.swing.JLabel();
        jComboBoxTxPwr = new javax.swing.JComboBox();
        jPanelTxPulseLen = new javax.swing.JPanel();
        jTextFieldTxPulseLen = new javax.swing.JTextField();
        jSliderTxPulseLen = new javax.swing.JSlider();
        jPanelSens = new javax.swing.JPanel();
        jCheckBoxTempEn = new javax.swing.JCheckBox();
        jCheckBoxCompEn = new javax.swing.JCheckBox();
        jCheckBoxAccEn = new javax.swing.JCheckBox();
        jCheckBoxPressEn = new javax.swing.JCheckBox();
        jCheckBoxCVEn = new javax.swing.JCheckBox();
        jCheckBoxSensRecordEn = new javax.swing.JCheckBox();
        jPanelLed = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSliderFpgaLeds = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxGreenLed0 = new javax.swing.JCheckBox();
        jCheckBoxGreenLed1 = new javax.swing.JCheckBox();
        jCheckBoxRedLed0 = new javax.swing.JCheckBox();
        jCheckBoxRedLed1 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxBlueLed = new javax.swing.JCheckBox();
        jCheckBoxRedLed = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jCheckBoxGreenLed = new javax.swing.JCheckBox();
        jCheckBoxYellowLed = new javax.swing.JCheckBox();
        jButtonSaveClose = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jButtonSaveAs = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelComSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("SonarCom Module settings"));

        jLabelSonarComCLIPort.setText("Control Port:");

        jLabelSonarComCLIPortName.setText("<not connected>");

        jLabelSonarComDataPort.setText("Data Port:");

        jLabelSonarComDataPortName.setText("<not connected>");

        jCheckBoxSonarComAutoConnect.setText("Auto connect");
        jCheckBoxSonarComAutoConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSonarComAutoConnectActionPerformed(evt);
            }
        });

        jCheckBoxSonarFishPower.setText("SonarFish power");
        jCheckBoxSonarFishPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSonarFishPowerActionPerformed(evt);
            }
        });

        jComboBoxSonarComCLIPort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<none>" }));
        jComboBoxSonarComCLIPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSonarComCLIPortActionPerformed(evt);
            }
        });

        jComboBoxSonarComDataPort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<none>" }));
        jComboBoxSonarComDataPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSonarComDataPortActionPerformed(evt);
            }
        });

        jButtonRefreshPortList.setText("Refresh port list");
        jButtonRefreshPortList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshPortListActionPerformed(evt);
            }
        });

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelComSettingsLayout = new javax.swing.GroupLayout(jPanelComSettings);
        jPanelComSettings.setLayout(jPanelComSettingsLayout);
        jPanelComSettingsLayout.setHorizontalGroup(
            jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelComSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxSonarComAutoConnect)
                    .addComponent(jCheckBoxSonarFishPower)
                    .addGroup(jPanelComSettingsLayout.createSequentialGroup()
                        .addGroup(jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelSonarComCLIPort)
                            .addComponent(jLabelSonarComDataPort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxSonarComCLIPort, 0, 279, Short.MAX_VALUE)
                            .addComponent(jComboBoxSonarComDataPort, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanelComSettingsLayout.createSequentialGroup()
                        .addComponent(jLabelSonarComCLIPortName, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelSonarComDataPortName))
                    .addGroup(jPanelComSettingsLayout.createSequentialGroup()
                        .addComponent(jButtonRefreshPortList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConnect)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanelComSettingsLayout.setVerticalGroup(
            jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelComSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxSonarFishPower)
                .addGap(5, 5, 5)
                .addComponent(jCheckBoxSonarComAutoConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSonarComCLIPort)
                    .addComponent(jComboBoxSonarComCLIPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSonarComDataPort)
                    .addComponent(jComboBoxSonarComDataPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRefreshPortList)
                    .addComponent(jButtonConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelComSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSonarComDataPortName)
                    .addComponent(jLabelSonarComCLIPortName))
                .addContainerGap(212, Short.MAX_VALUE))
        );

        jTabbedPanePref.addTab("SonarCom", jPanelComSettings);

        jPanelRx.setBorder(javax.swing.BorderFactory.createTitledBorder("Receiver settings"));

        jLabelRxEn.setText("Rx enable");

        jComboBoxRxEn.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Left", "Right", "Both" }));
        jComboBoxRxEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRxEnActionPerformed(evt);
            }
        });

        jLabelRxGain.setText("Rx gain");

        jComboBoxRxGain.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TVG", "Fixed" }));
        jComboBoxRxGain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRxGainActionPerformed(evt);
            }
        });

        jComboBoxRxRange.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25 m", "50 m", "75 m", "100 m", "150 m", "200 m", "250 m" }));
        jComboBoxRxRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRxRangeActionPerformed(evt);
            }
        });

        jLabelRxRange.setText("Rx range");

        jCheckBoxRxRecord.setText("Record Rx data");
        jCheckBoxRxRecord.setToolTipText("Record data to SD-Card localy in the Sonar");
        jCheckBoxRxRecord.setEnabled(false);
        jCheckBoxRxRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRxRecordActionPerformed(evt);
            }
        });

        jComboBoxRxDeadZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0 m", "0.5 m", "1 m", "2 m", "3 m", "4 m", "5 m", "10 m", "15 m", "20 m", "25 m", "30 m", "35 m", "40 m", "45 m", "50 m" }));
        jComboBoxRxDeadZone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRxDeadZoneActionPerformed(evt);
            }
        });

        jLabelRxDeadZone.setText("Rx dead zone");

        jPanelRxGainOffset.setBorder(javax.swing.BorderFactory.createTitledBorder("Time Variable Gain offset (%)"));

        jSliderRxGainOffset.setMajorTickSpacing(25);
        jSliderRxGainOffset.setMinorTickSpacing(5);
        jSliderRxGainOffset.setPaintLabels(true);
        jSliderRxGainOffset.setPaintTicks(true);
        jSliderRxGainOffset.setValue(0);
        jSliderRxGainOffset.setValueIsAdjusting(true);
        jSliderRxGainOffset.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderRxGainOffsetStateChanged(evt);
            }
        });

        jTextFieldRxGainOffset.setText("0");
        jTextFieldRxGainOffset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRxGainOffsetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRxGainOffsetLayout = new javax.swing.GroupLayout(jPanelRxGainOffset);
        jPanelRxGainOffset.setLayout(jPanelRxGainOffsetLayout);
        jPanelRxGainOffsetLayout.setHorizontalGroup(
            jPanelRxGainOffsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRxGainOffsetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderRxGainOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldRxGainOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelRxGainOffsetLayout.setVerticalGroup(
            jPanelRxGainOffsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRxGainOffsetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldRxGainOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelRxGainOffsetLayout.createSequentialGroup()
                .addComponent(jSliderRxGainOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanelRxGainSlope.setBorder(javax.swing.BorderFactory.createTitledBorder("Time Variable Gain slope (%)"));

        jTextFieldRxGainSlope.setText("0");
        jTextFieldRxGainSlope.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRxGainSlopeActionPerformed(evt);
            }
        });

        jSliderRxGainSlope.setMajorTickSpacing(25);
        jSliderRxGainSlope.setMinorTickSpacing(5);
        jSliderRxGainSlope.setPaintLabels(true);
        jSliderRxGainSlope.setPaintTicks(true);
        jSliderRxGainSlope.setValue(0);
        jSliderRxGainSlope.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderRxGainSlopeStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelRxGainSlopeLayout = new javax.swing.GroupLayout(jPanelRxGainSlope);
        jPanelRxGainSlope.setLayout(jPanelRxGainSlopeLayout);
        jPanelRxGainSlopeLayout.setHorizontalGroup(
            jPanelRxGainSlopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRxGainSlopeLayout.createSequentialGroup()
                .addComponent(jSliderRxGainSlope, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldRxGainSlope, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelRxGainSlopeLayout.setVerticalGroup(
            jPanelRxGainSlopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRxGainSlopeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldRxGainSlope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelRxGainSlopeLayout.createSequentialGroup()
                .addComponent(jSliderRxGainSlope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelRxLayout = new javax.swing.GroupLayout(jPanelRx);
        jPanelRx.setLayout(jPanelRxLayout);
        jPanelRxLayout.setHorizontalGroup(
            jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRxLayout.createSequentialGroup()
                        .addGroup(jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelRxLayout.createSequentialGroup()
                                .addComponent(jLabelRxRange)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxRxRange, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelRxLayout.createSequentialGroup()
                                .addGroup(jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelRxEn)
                                    .addComponent(jLabelRxGain))
                                .addGap(12, 12, 12)
                                .addGroup(jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxRxEn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxRxGain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelRxLayout.createSequentialGroup()
                                .addComponent(jCheckBoxRxRecord)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanelRxLayout.createSequentialGroup()
                                .addComponent(jLabelRxDeadZone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxRxDeadZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRxLayout.createSequentialGroup()
                        .addComponent(jPanelRxGainOffset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanelRxGainSlope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanelRxLayout.setVerticalGroup(
            jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRxEn)
                    .addComponent(jComboBoxRxEn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxRxRecord))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRxGain)
                    .addComponent(jComboBoxRxGain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelRxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRxRange)
                    .addComponent(jComboBoxRxRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRxDeadZone)
                    .addComponent(jComboBoxRxDeadZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelRxGainOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelRxGainSlope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        jTabbedPaneSonarFish.addTab("Receiver", jPanelRx);

        jPanelTx.setBorder(javax.swing.BorderFactory.createTitledBorder("Transmitter settings"));

        jComboBoxTxMod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chirp", "Ramp", "Square" }));
        jComboBoxTxMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTxModActionPerformed(evt);
            }
        });

        jLabelTxMod.setText("Tx modulation");

        jLabelTxEn.setText("Tx enable");

        jComboBoxTxEn.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Left", "Right", "Both" }));
        jComboBoxTxEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTxEnActionPerformed(evt);
            }
        });

        jLabelTxPow.setText("Tx power");

        jComboBoxTxPwr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25%", "50%", "75%", "100%" }));
        jComboBoxTxPwr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTxPwrActionPerformed(evt);
            }
        });

        jPanelTxPulseLen.setBorder(javax.swing.BorderFactory.createTitledBorder("Tx pulse length (cm)"));

        jTextFieldTxPulseLen.setText("0");
        jTextFieldTxPulseLen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTxPulseLenActionPerformed(evt);
            }
        });

        jSliderTxPulseLen.setMajorTickSpacing(25);
        jSliderTxPulseLen.setMinorTickSpacing(5);
        jSliderTxPulseLen.setPaintLabels(true);
        jSliderTxPulseLen.setPaintTicks(true);
        jSliderTxPulseLen.setSnapToTicks(true);
        jSliderTxPulseLen.setValue(0);
        jSliderTxPulseLen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderTxPulseLenStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelTxPulseLenLayout = new javax.swing.GroupLayout(jPanelTxPulseLen);
        jPanelTxPulseLen.setLayout(jPanelTxPulseLenLayout);
        jPanelTxPulseLenLayout.setHorizontalGroup(
            jPanelTxPulseLenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTxPulseLenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderTxPulseLen, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTxPulseLen, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelTxPulseLenLayout.setVerticalGroup(
            jPanelTxPulseLenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTxPulseLenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldTxPulseLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSliderTxPulseLen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelTxLayout = new javax.swing.GroupLayout(jPanelTx);
        jPanelTx.setLayout(jPanelTxLayout);
        jPanelTxLayout.setHorizontalGroup(
            jPanelTxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTxLayout.createSequentialGroup()
                        .addGroup(jPanelTxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTxEn)
                            .addComponent(jLabelTxMod)
                            .addComponent(jLabelTxPow))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxTxEn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxTxPwr, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxTxMod, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanelTxPulseLen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelTxLayout.setVerticalGroup(
            jPanelTxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTxMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTxMod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTxEn)
                    .addComponent(jComboBoxTxEn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTxPwr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTxPow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTxPulseLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
        );

        jTabbedPaneSonarFish.addTab("Transmitter", jPanelTx);

        jPanelSens.setBorder(javax.swing.BorderFactory.createTitledBorder("Sensor settings"));

        jCheckBoxTempEn.setText("Temperatur");
        jCheckBoxTempEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTempEnActionPerformed(evt);
            }
        });

        jCheckBoxCompEn.setText("Compass");
        jCheckBoxCompEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCompEnActionPerformed(evt);
            }
        });

        jCheckBoxAccEn.setText("Accelerometers");
        jCheckBoxAccEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAccEnActionPerformed(evt);
            }
        });

        jCheckBoxPressEn.setText("Pressure");
        jCheckBoxPressEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPressEnActionPerformed(evt);
            }
        });

        jCheckBoxCVEn.setText("Current/Voltage");
        jCheckBoxCVEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCVEnActionPerformed(evt);
            }
        });

        jCheckBoxSensRecordEn.setText("Record sensor data");
        jCheckBoxSensRecordEn.setToolTipText("Record data to SD-Card localy in the Sonar");
        jCheckBoxSensRecordEn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSensRecordEnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSensLayout = new javax.swing.GroupLayout(jPanelSens);
        jPanelSens.setLayout(jPanelSensLayout);
        jPanelSensLayout.setHorizontalGroup(
            jPanelSensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSensLayout.createSequentialGroup()
                .addGroup(jPanelSensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxTempEn)
                    .addComponent(jCheckBoxPressEn)
                    .addComponent(jCheckBoxAccEn)
                    .addComponent(jCheckBoxCompEn)
                    .addComponent(jCheckBoxCVEn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jCheckBoxSensRecordEn)
                .addGap(60, 60, 60))
        );
        jPanelSensLayout.setVerticalGroup(
            jPanelSensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSensLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxTempEn)
                    .addComponent(jCheckBoxSensRecordEn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxCompEn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxAccEn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPressEn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxCVEn)
                .addContainerGap(201, Short.MAX_VALUE))
        );

        jTabbedPaneSonarFish.addTab("Sensors", jPanelSens);

        jTabbedPanePref.addTab("SonarFish", jTabbedPaneSonarFish);

        jPanelLed.setBorder(javax.swing.BorderFactory.createTitledBorder("LED control (for test purpose)"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("SonarFish FPGA LED's"));

        jSliderFpgaLeds.setMajorTickSpacing(1);
        jSliderFpgaLeds.setMaximum(8);
        jSliderFpgaLeds.setPaintLabels(true);
        jSliderFpgaLeds.setPaintTicks(true);
        jSliderFpgaLeds.setSnapToTicks(true);
        jSliderFpgaLeds.setValue(0);
        jSliderFpgaLeds.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderFpgaLedsStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderFpgaLeds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSliderFpgaLeds, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("SonarCom LED's"));

        jCheckBoxGreenLed0.setText("Green LED #0");
        jCheckBoxGreenLed0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxGreenLed0ActionPerformed(evt);
            }
        });

        jCheckBoxGreenLed1.setText("Green LED #1");
        jCheckBoxGreenLed1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxGreenLed1ActionPerformed(evt);
            }
        });

        jCheckBoxRedLed0.setText("Red LED #0");
        jCheckBoxRedLed0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRedLed0ActionPerformed(evt);
            }
        });

        jCheckBoxRedLed1.setText("Red LED #1");
        jCheckBoxRedLed1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRedLed1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxGreenLed0)
                    .addComponent(jCheckBoxGreenLed1)
                    .addComponent(jCheckBoxRedLed0)
                    .addComponent(jCheckBoxRedLed1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxGreenLed0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxGreenLed1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRedLed0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRedLed1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("SonarFish uC LED's"));

        jCheckBoxBlueLed.setText("Blue RS485 LED");
        jCheckBoxBlueLed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBlueLedActionPerformed(evt);
            }
        });

        jCheckBoxRedLed.setText("Red SDcard LED");
        jCheckBoxRedLed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRedLedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxBlueLed)
                    .addComponent(jCheckBoxRedLed))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxBlueLed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRedLed)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("SensorModule LED's"));

        jCheckBoxGreenLed.setText("Green Sensor LED");
        jCheckBoxGreenLed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxGreenLedActionPerformed(evt);
            }
        });

        jCheckBoxYellowLed.setText("Yellow Sensor LED");
        jCheckBoxYellowLed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxYellowLedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCheckBoxGreenLed)
            .addComponent(jCheckBoxYellowLed)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jCheckBoxGreenLed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxYellowLed))
        );

        javax.swing.GroupLayout jPanelLedLayout = new javax.swing.GroupLayout(jPanelLed);
        jPanelLed.setLayout(jPanelLedLayout);
        jPanelLedLayout.setHorizontalGroup(
            jPanelLedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLedLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLedLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelLedLayout.setVerticalGroup(
            jPanelLedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                .addGroup(jPanelLedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPanePref.addTab("LED's", jPanelLed);

        jButtonSaveClose.setText("Save & Close");
        jButtonSaveClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveCloseActionPerformed(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonSaveAs.setText("Save as");
        jButtonSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAsActionPerformed(evt);
            }
        });

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPanePref)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSaveAs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonClose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSaveClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPanePref)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSaveClose)
                    .addComponent(jButtonClose)
                    .addComponent(jButtonSaveAs)
                    .addComponent(jButtonLoad))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxSonarComAutoConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSonarComAutoConnectActionPerformed
        sonarComConfig.sonarComAutoConnect(jCheckBoxSonarComAutoConnect.isSelected());
    }//GEN-LAST:event_jCheckBoxSonarComAutoConnectActionPerformed

    private void jCheckBoxSonarFishPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSonarFishPowerActionPerformed
        sonarComConfig.sonarFishPwrEn(jCheckBoxSonarFishPower.isSelected());
    }//GEN-LAST:event_jCheckBoxSonarFishPowerActionPerformed

    private void jComboBoxSonarComCLIPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSonarComCLIPortActionPerformed
        if (jComboBoxSonarComCLIPort.getItemCount() > 0) {
            sonarComConfig.sonarComCLIPortName((String)jComboBoxSonarComCLIPort.getSelectedItem());
        }
    }//GEN-LAST:event_jComboBoxSonarComCLIPortActionPerformed

    private void jComboBoxSonarComDataPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSonarComDataPortActionPerformed
        if (jComboBoxSonarComDataPort.getItemCount() > 0) {
            sonarComConfig.sonarComDataPortName((String)jComboBoxSonarComDataPort.getSelectedItem());
        }
    }//GEN-LAST:event_jComboBoxSonarComDataPortActionPerformed

    private void jButtonRefreshPortListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshPortListActionPerformed
        String[] portNameList;

        /* Empty lists first */
        jComboBoxSonarComCLIPort.removeAllItems();
        jComboBoxSonarComDataPort.removeAllItems();

        if (this.sonarComCLI == null) {
            jComboBoxSonarComCLIPort.addItem("<none>");
            jComboBoxSonarComDataPort.addItem("<none>");
            return;
        }
        
        /* Get portnames */
        portNameList = this.sonarComCLI.getPortNameList();
        if (portNameList == null || portNameList.length == 0) {
            jComboBoxSonarComCLIPort.addItem("<none>");
            jComboBoxSonarComDataPort.addItem("<none>");
            return;
        }

        /* Add all found ports */        
        for (String portName : portNameList) {
            System.out.println("portName " + portName);
            jComboBoxSonarComCLIPort.addItem(portName);
            jComboBoxSonarComDataPort.addItem(portName);
        }
        
//            /* Set default Control port to the first port found */
//            jComboBoxSonarComCLIPort.setSelectedIndex(0);
//            
//            /* Set default Data port to the second port found */
//            if (jComboBoxSonarComDataPort.getItemCount() > 1) {
//                jComboBoxSonarComDataPort.setSelectedIndex(1);
//            }
    }//GEN-LAST:event_jButtonRefreshPortListActionPerformed

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        boolean connected = false;
        String commandPortName = null;
        String dataPortName = null;

//        if (this.sonarComCLI.IsPortOpen() || this.sonarComData.IsPortOpen()) {
//            this.sonarComCLI.DissconnectPort();
//            this.sonarComData.DissconnectPort();
//        }

        if (jComboBoxSonarComCLIPort.getSelectedIndex() > 0)
            commandPortName = (String)jComboBoxSonarComCLIPort.getSelectedItem();

        if (jComboBoxSonarComDataPort.getSelectedIndex() > 0)
            dataPortName = (String)jComboBoxSonarComDataPort.getSelectedItem();

//        this.sonarComCLI.ConnectPort(commandPortName);
//        this.sonarComData.ConnectPort(dataPortName);

//        if (this.sonarComCLI.IsPortOpen() || this.sonarComData.IsPortOpen()) {
//            jButtonConnect.setText("Reconnect");
//        } else {
//            jButtonConnect.setText("Connect");
//        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void jComboBoxRxEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRxEnActionPerformed
        sonarFishConfig.sonarRxOn(jComboBoxRxEn.getSelectedIndex());
    }//GEN-LAST:event_jComboBoxRxEnActionPerformed

    private void jComboBoxRxGainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRxGainActionPerformed
        sonarFishConfig.sonarRxGainType(jComboBoxRxGain.getSelectedIndex());
    }//GEN-LAST:event_jComboBoxRxGainActionPerformed

    private void jComboBoxRxRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRxRangeActionPerformed
        sonarFishConfig.sonarRxRange(jComboBoxRxRange.getSelectedIndex());
    }//GEN-LAST:event_jComboBoxRxRangeActionPerformed

    private void jCheckBoxRxRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRxRecordActionPerformed
        sonarFishConfig.sonarRxRecEn(jCheckBoxRxRecord.isSelected());
    }//GEN-LAST:event_jCheckBoxRxRecordActionPerformed

    private void jComboBoxRxDeadZoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRxDeadZoneActionPerformed
        sonarFishConfig.sonarRxDeadZone(jComboBoxRxDeadZone.getSelectedIndex());
    }//GEN-LAST:event_jComboBoxRxDeadZoneActionPerformed

    private void jSliderRxGainOffsetStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderRxGainOffsetStateChanged
        jTextFieldRxGainOffset.setText(Integer.toString(jSliderRxGainOffset.getValue()));
        sonarFishConfig.sonarRxGainOffset(jSliderRxGainOffset.getValue());
    }//GEN-LAST:event_jSliderRxGainOffsetStateChanged

    private void jTextFieldRxGainOffsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldRxGainOffsetActionPerformed
        try {
            jSliderRxGainOffset.setValue(Integer.parseInt(jTextFieldRxGainOffset.getText()));
        }
        catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null,"Wrong number format","Error",JOptionPane.WARNING_MESSAGE);
            jTextFieldRxGainOffset.setText(Integer.toString(jSliderRxGainOffset.getValue()));
        }

        jTextFieldRxGainOffset.setText(Integer.toString(jSliderRxGainOffset.getValue()));
    }//GEN-LAST:event_jTextFieldRxGainOffsetActionPerformed

    private void jTextFieldRxGainSlopeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldRxGainSlopeActionPerformed
        try {
            jSliderRxGainSlope.setValue(Integer.parseInt(jTextFieldRxGainSlope.getText()));
//            SendRxGainSlopeCmd(true);
        }
        catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null,"Wrong number format","Error",JOptionPane.WARNING_MESSAGE);
            jTextFieldRxGainSlope.setText(Integer.toString(jSliderRxGainSlope.getValue()));
        }

    }//GEN-LAST:event_jTextFieldRxGainSlopeActionPerformed

    private void jSliderRxGainSlopeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderRxGainSlopeStateChanged
        jTextFieldRxGainSlope.setText(Integer.toString(jSliderRxGainSlope.getValue()));
        sonarFishConfig.sonarRxGainSlope(jSliderRxGainSlope.getValue());
    }//GEN-LAST:event_jSliderRxGainSlopeStateChanged

    private void jComboBoxTxModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTxModActionPerformed
        sonarFishConfig.sonarTxMod(jComboBoxTxMod.getSelectedIndex());
    }//GEN-LAST:event_jComboBoxTxModActionPerformed

    private void jComboBoxTxEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTxEnActionPerformed
        sonarFishConfig.sonarTxOn(jComboBoxTxEn.getSelectedIndex());
    }//GEN-LAST:event_jComboBoxTxEnActionPerformed

    private void jComboBoxTxPwrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTxPwrActionPerformed
        sonarFishConfig.sonarTxPwr(jComboBoxTxPwr.getSelectedIndex());
    }//GEN-LAST:event_jComboBoxTxPwrActionPerformed

    private void jTextFieldTxPulseLenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTxPulseLenActionPerformed
        try {
            jSliderTxPulseLen.setValue(Integer.parseInt(jTextFieldTxPulseLen.getText()));
            jTextFieldTxPulseLen.setText(Integer.toString(jSliderTxPulseLen.getValue()));
        }
        catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null,"Wrong number format","Error",JOptionPane.WARNING_MESSAGE);
            jTextFieldTxPulseLen.setText(Integer.toString(jSliderTxPulseLen.getValue()));
        }
    }//GEN-LAST:event_jTextFieldTxPulseLenActionPerformed

    private void jSliderTxPulseLenStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTxPulseLenStateChanged
        jTextFieldTxPulseLen.setText(Integer.toString(jSliderTxPulseLen.getValue()));
        sonarFishConfig.sonarTxPulseLen(jSliderTxPulseLen.getValue());
    }//GEN-LAST:event_jSliderTxPulseLenStateChanged

    private void jCheckBoxTempEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTempEnActionPerformed
        sonarFishConfig.sensorTempEn(jCheckBoxTempEn.isSelected());
    }//GEN-LAST:event_jCheckBoxTempEnActionPerformed

    private void jCheckBoxCompEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCompEnActionPerformed
        sonarFishConfig.sensorCompEn(jCheckBoxCompEn.isSelected());
    }//GEN-LAST:event_jCheckBoxCompEnActionPerformed

    private void jCheckBoxAccEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAccEnActionPerformed
        sonarFishConfig.sensorAccEn(jCheckBoxAccEn.isSelected());
    }//GEN-LAST:event_jCheckBoxAccEnActionPerformed

    private void jCheckBoxPressEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPressEnActionPerformed
        sonarFishConfig.sensorPressEn(jCheckBoxPressEn.isSelected());
    }//GEN-LAST:event_jCheckBoxPressEnActionPerformed

    private void jCheckBoxCVEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCVEnActionPerformed
        sonarFishConfig.sensorCVEn(jCheckBoxCVEn.isSelected());
    }//GEN-LAST:event_jCheckBoxCVEnActionPerformed

    private void jCheckBoxSensRecordEnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSensRecordEnActionPerformed
        sonarFishConfig.sensorRecEn(jCheckBoxSensRecordEn.isSelected());
    }//GEN-LAST:event_jCheckBoxSensRecordEnActionPerformed

    private void jButtonSaveCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveCloseActionPerformed
        int rVal = JOptionPane.showConfirmDialog(null, 
                "Are you sure you want to overwrite the default SonarCom configuration file \"" + this.sonarComConfig.sonarComConfigFileName + "\"\n" +
                "and SonarFish configuration file \"" + this.sonarComConfig.sonarFishConfigFileName + "\"");
        if (rVal == JOptionPane.CANCEL_OPTION) {
            return;
        } else if (rVal == JOptionPane.OK_OPTION) {
            this.sonarComConfig.save();
            this.sonarFishConfig.save();
        }
        dispose();
    }//GEN-LAST:event_jButtonSaveCloseActionPerformed

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        String fileName;

        // Create "Open" dialog:
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
          "Sonar configuration", "conf");
        fileChooser.setFileFilter(filter);
        int rVal = fileChooser.showOpenDialog(PrefsJDialog.this);

        if (rVal == JFileChooser.APPROVE_OPTION) {
            fileName = fileChooser.getCurrentDirectory().toString()+ "/" + fileChooser.getSelectedFile().getName();
            this.sonarFishConfig.load(fileName);
            initializeDialog();
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAsActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        String fileName;
      
        // Create "save" dialog:
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
          "Sonar configuration", "conf");
        fileChooser.setFileFilter(filter);

        int rVal = fileChooser.showSaveDialog(PrefsJDialog.this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            fileName = fileChooser.getCurrentDirectory().toString()+ "/" + fileChooser.getSelectedFile().getName();
            this.sonarFishConfig.save(fileName);
        }
    }//GEN-LAST:event_jButtonSaveAsActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jCheckBoxGreenLedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxGreenLedActionPerformed
        sonarFishConfig.sensorGreenLedEn(jCheckBoxGreenLed.isSelected());
    }//GEN-LAST:event_jCheckBoxGreenLedActionPerformed

    private void jCheckBoxYellowLedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxYellowLedActionPerformed
        sonarFishConfig.sensorYellowLedEn(jCheckBoxYellowLed.isSelected());
    }//GEN-LAST:event_jCheckBoxYellowLedActionPerformed

    private void jCheckBoxRedLedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRedLedActionPerformed
        sonarFishConfig.sonarRedLedEn(jCheckBoxRedLed.isSelected());
    }//GEN-LAST:event_jCheckBoxRedLedActionPerformed

    private void jCheckBoxBlueLedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBlueLedActionPerformed
        sonarFishConfig.sonarBlueLedEn(jCheckBoxBlueLed.isSelected());
    }//GEN-LAST:event_jCheckBoxBlueLedActionPerformed

    private void jSliderFpgaLedsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderFpgaLedsStateChanged
        sonarFishConfig.sonarFpgaLeds(jSliderFpgaLeds.getValue());
    }//GEN-LAST:event_jSliderFpgaLedsStateChanged

    private void jCheckBoxRedLed0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRedLed0ActionPerformed
        sonarComConfig.sonarComRedLed0(jCheckBoxRedLed0.isSelected());
    }//GEN-LAST:event_jCheckBoxRedLed0ActionPerformed

    private void jCheckBoxRedLed1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRedLed1ActionPerformed
        sonarComConfig.sonarComRedLed1(jCheckBoxRedLed1.isSelected());
    }//GEN-LAST:event_jCheckBoxRedLed1ActionPerformed

    private void jCheckBoxGreenLed0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxGreenLed0ActionPerformed
        sonarComConfig.sonarComGreenLed0(jCheckBoxGreenLed0.isSelected());
    }//GEN-LAST:event_jCheckBoxGreenLed0ActionPerformed

    private void jCheckBoxGreenLed1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxGreenLed1ActionPerformed
        sonarComConfig.sonarComGreenLed1(jCheckBoxGreenLed1.isSelected());
    }//GEN-LAST:event_jCheckBoxGreenLed1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonRefreshPortList;
    private javax.swing.JButton jButtonSaveAs;
    private javax.swing.JButton jButtonSaveClose;
    private javax.swing.JCheckBox jCheckBoxAccEn;
    private javax.swing.JCheckBox jCheckBoxBlueLed;
    private javax.swing.JCheckBox jCheckBoxCVEn;
    private javax.swing.JCheckBox jCheckBoxCompEn;
    private javax.swing.JCheckBox jCheckBoxGreenLed;
    private javax.swing.JCheckBox jCheckBoxGreenLed0;
    private javax.swing.JCheckBox jCheckBoxGreenLed1;
    private javax.swing.JCheckBox jCheckBoxPressEn;
    private javax.swing.JCheckBox jCheckBoxRedLed;
    private javax.swing.JCheckBox jCheckBoxRedLed0;
    private javax.swing.JCheckBox jCheckBoxRedLed1;
    private javax.swing.JCheckBox jCheckBoxRxRecord;
    private javax.swing.JCheckBox jCheckBoxSensRecordEn;
    private javax.swing.JCheckBox jCheckBoxSonarComAutoConnect;
    private javax.swing.JCheckBox jCheckBoxSonarFishPower;
    private javax.swing.JCheckBox jCheckBoxTempEn;
    private javax.swing.JCheckBox jCheckBoxYellowLed;
    private javax.swing.JComboBox jComboBoxRxDeadZone;
    private javax.swing.JComboBox jComboBoxRxEn;
    private javax.swing.JComboBox jComboBoxRxGain;
    private javax.swing.JComboBox jComboBoxRxRange;
    private javax.swing.JComboBox jComboBoxSonarComCLIPort;
    private javax.swing.JComboBox jComboBoxSonarComDataPort;
    private javax.swing.JComboBox jComboBoxTxEn;
    private javax.swing.JComboBox jComboBoxTxMod;
    private javax.swing.JComboBox jComboBoxTxPwr;
    private javax.swing.JLabel jLabelRxDeadZone;
    private javax.swing.JLabel jLabelRxEn;
    private javax.swing.JLabel jLabelRxGain;
    private javax.swing.JLabel jLabelRxRange;
    private javax.swing.JLabel jLabelSonarComCLIPort;
    private javax.swing.JLabel jLabelSonarComCLIPortName;
    private javax.swing.JLabel jLabelSonarComDataPort;
    private javax.swing.JLabel jLabelSonarComDataPortName;
    private javax.swing.JLabel jLabelTxEn;
    private javax.swing.JLabel jLabelTxMod;
    private javax.swing.JLabel jLabelTxPow;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelComSettings;
    private javax.swing.JPanel jPanelLed;
    private javax.swing.JPanel jPanelRx;
    private javax.swing.JPanel jPanelRxGainOffset;
    private javax.swing.JPanel jPanelRxGainSlope;
    private javax.swing.JPanel jPanelSens;
    private javax.swing.JPanel jPanelTx;
    private javax.swing.JPanel jPanelTxPulseLen;
    private javax.swing.JSlider jSliderFpgaLeds;
    private javax.swing.JSlider jSliderRxGainOffset;
    private javax.swing.JSlider jSliderRxGainSlope;
    private javax.swing.JSlider jSliderTxPulseLen;
    private javax.swing.JTabbedPane jTabbedPanePref;
    private javax.swing.JTabbedPane jTabbedPaneSonarFish;
    private javax.swing.JTextField jTextFieldRxGainOffset;
    private javax.swing.JTextField jTextFieldRxGainSlope;
    private javax.swing.JTextField jTextFieldTxPulseLen;
    // End of variables declaration//GEN-END:variables
}
